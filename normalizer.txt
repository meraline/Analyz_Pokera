class flopYourself:
    colors = ["S", "H", "D", "C"]
    numbers = ["2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"]

    def __init__(self):
        # Use array to be able to edit stuff (Not necessary but good to have)
        # Then translate into map to bring average bigO to 1 later on
        self.mapColors = {}
        self.mapNumber = {}
        colors_length = len(self.colors)
        for i, c in enumerate(flopYourself.colors):
            self.mapColors[c] = i

        for i, n in enumerate(flopYourself.numbers):
            self.mapNumber[n] = i * colors_length

    def getCardColor(self, card):
        return card[-1:]

    def getCardNumber(self, card):
        return card[:-1]

    def cardToNumber(self, card):
        val = self.mapColors[self.getCardColor(card)] + self.mapNumber[self.getCardNumber(card)]
        return val

    def translate(self, list):
        expanded_list = []
        for card in list:
            card = card.upper()
            expanded_list.append((card, self.cardToNumber(card)))
        # print(expanded_list)
        expanded_list.sort(key=lambda x: x[1], reverse=True)
        # print(expanded_list)
        noOfCards = len(set([self.getCardColor(x[0]) for x in expanded_list]))
        noOfNumbers = len(set([self.getCardNumber(x[0]) for x in expanded_list]))
        if noOfCards == 3:
            return self.getCardNumber(expanded_list[0][0]) + "h" + self.getCardNumber(
                expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "d"
        elif noOfCards == 1:
            return self.getCardNumber(expanded_list[0][0]) + "c" + self.getCardNumber(
                expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "c"
        elif noOfCards == 2:
            if noOfNumbers == 3:
                if self.getCardColor(expanded_list[0][0]) == self.getCardColor(expanded_list[1][0]):
                    return self.getCardNumber(expanded_list[0][0]) + "c" + self.getCardNumber(
                        expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "d"
                if self.getCardColor(expanded_list[0][0]) == self.getCardColor(expanded_list[2][0]):
                    return self.getCardNumber(expanded_list[0][0]) + "c" + self.getCardNumber(
                        expanded_list[1][0]) + "d" + self.getCardNumber(expanded_list[2][0]) + "c"
                if self.getCardColor(expanded_list[1][0]) == self.getCardColor(expanded_list[2][0]):
                    return self.getCardNumber(expanded_list[0][0]) + "d" + self.getCardNumber(
                        expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "c"
                else:
                    return "Houston we have a serious problem!"
            elif noOfNumbers == 2:
                if self.getCardNumber(expanded_list[0][0]) == self.getCardNumber(expanded_list[1][0]):
                    return self.getCardNumber(expanded_list[0][0]) + "d" + self.getCardNumber(
                        expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "c"
                elif self.getCardNumber(expanded_list[1][0]) == self.getCardNumber(expanded_list[2][0]):
                    return self.getCardNumber(expanded_list[0][0]) + "c" + self.getCardNumber(
                        expanded_list[1][0]) + "c" + self.getCardNumber(expanded_list[2][0]) + "d"
                else:
                    return "I ran out of ways to say we have a problem :("
            else:
                return "Houston we got a problem!"
        else:
            return "Houston we have a problem!"

    def translateFromString(self, string):
        list = [string[:2], string[2:4], string[4:]]
        return self.translate(list)


if __name__ == "__main__":
    fy = flopYourself()
    while True:
        a = input("Gimme: ")
        print("Result:", fy.translateFromString(a))
